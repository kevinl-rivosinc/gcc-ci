name: "Intialize submodules"

# Nightly support: True
# Patchworks support: False

on:
  workflow_call:

jobs:
  init-submodules:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Get riscv-gnu-toolchain hash
        id: riscv_gnu_toolchain_hash
        run: |
          export HASH=$(git rev-parse HEAD:riscv-gnu-toolchain)
          echo $HASH
          echo "riscv_gnu_toolchain_hash=$HASH" >> "$GITHUB_OUTPUT"

      - name: Clone riscv-gnu-toolchain
        run: |
          git clone https://github.com/patrick-rivos/riscv-gnu-toolchain.git
          cd riscv-gnu-toolchain
          git checkout ${{ steps.riscv_gnu_toolchain_hash.outputs.riscv_gnu_toolchain_hash }}

      - name: Retrieve cache
        id: retrieve-cache
        uses: actions/cache@v3
        with:
          path: |
            riscv-gnu-toolchain/.git
            riscv-gnu-toolchain/binutils
            riscv-gnu-toolchain/dejagnu
            riscv-gnu-toolchain/gcc
            riscv-gnu-toolchain/glibc
            riscv-gnu-toolchain/newlib
            riscv-gnu-toolchain/qemu
          key: submodules-archive-3 # Numbered archive to allow for easy transition when bumping submodules

      - name: Initalize submodules cache
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        working-directory: riscv-gnu-toolchain
        run: |
          git submodule update --init --recursive --depth 1 binutils
          git submodule update --init --recursive --depth 1 dejagnu
          git submodule update --init --recursive --depth 1 gdb
          git submodule update --init --recursive --depth 1 glibc
          git submodule update --init --recursive --depth 1 newlib
          git submodule update --init --recursive --depth 1 qemu
          rm -rf gcc
          git clone git://gcc.gnu.org/git/gcc.git

      - name: Get GCC hash
        working-directory: riscv-gnu-toolchain/gcc
        id: gcc-hash
        run: |
          git checkout master
          git pull
          if [ "${{ github.event.inputs.gcchash }}" == "" ]; then
            export GCCHASH=$(git rev-parse HEAD)
          else
            export GCCHASH=${{ github.event.inputs.gcchash }}
          fi
          echo $GCCHASH
          echo "gcchash=$GCCHASH" >> "$GITHUB_OUTPUT"

      - name: Cache submodules
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            riscv-gnu-toolchain/.git
            riscv-gnu-toolchain/binutils
            riscv-gnu-toolchain/dejagnu
            riscv-gnu-toolchain/gcc
            riscv-gnu-toolchain/glibc
            riscv-gnu-toolchain/newlib
            riscv-gnu-toolchain/qemu
          key: submodules-archive-3

      - name: Make cache zip
        run: |
          zip -r cache.zip .git binutils dejagnu gcc gdb glibc newlib qemu

      # Use artifact rather than cache since cache downloads are flaky/hang.
      # Artifacts are reliable but ~30 min slower to set up.
      # Setup is done on one runner, so this isn't a show stopper.
      - name: Upload git cache
        uses: actions/upload-artifact@v3
        with:
          name: gcc-sources-${{ steps.gcc-hash.outputs.gcchash }}
          path: |
            cache.zip
          retention-days: 5

    outputs:
      gcchash: ${{ steps.gcc-hash.outputs.gcchash }}
      riscv_gnu_toolchain_hash: ${{ steps.riscv_gnu_toolchain_hash.outputs.riscv_gnu_toolchain_hash }}
